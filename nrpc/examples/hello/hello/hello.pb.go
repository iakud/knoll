// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.30.2
// source: example.proto

package example

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Text        *string                `protobuf:"bytes,1,opt,name=Text"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestRequest) Reset() {
	*x = TestRequest{}
	mi := &file_example_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRequest) ProtoMessage() {}

func (x *TestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestRequest) GetText() string {
	if x != nil {
		if x.xxx_hidden_Text != nil {
			return *x.xxx_hidden_Text
		}
		return ""
	}
	return ""
}

func (x *TestRequest) SetText(v string) {
	x.xxx_hidden_Text = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *TestRequest) HasText() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestRequest) ClearText() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Text = nil
}

type TestRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Text *string
}

func (b0 TestRequest_builder) Build() *TestRequest {
	m0 := &TestRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Text != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Text = b.Text
	}
	return m0
}

type TestReply struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Text        *string                `protobuf:"bytes,1,opt,name=Text"`
	xxx_hidden_Num         int32                  `protobuf:"varint,2,opt,name=Num"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestReply) Reset() {
	*x = TestReply{}
	mi := &file_example_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReply) ProtoMessage() {}

func (x *TestReply) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestReply) GetText() string {
	if x != nil {
		if x.xxx_hidden_Text != nil {
			return *x.xxx_hidden_Text
		}
		return ""
	}
	return ""
}

func (x *TestReply) GetNum() int32 {
	if x != nil {
		return x.xxx_hidden_Num
	}
	return 0
}

func (x *TestReply) SetText(v string) {
	x.xxx_hidden_Text = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *TestReply) SetNum(v int32) {
	x.xxx_hidden_Num = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *TestReply) HasText() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestReply) HasNum() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestReply) ClearText() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Text = nil
}

func (x *TestReply) ClearNum() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Num = 0
}

type TestReply_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Text *string
	Num  *int32
}

func (b0 TestReply_builder) Build() *TestReply {
	m0 := &TestReply{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Text != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Text = b.Text
	}
	if b.Num != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Num = *b.Num
	}
	return m0
}

var File_example_proto protoreflect.FileDescriptor

const file_example_proto_rawDesc = "" +
	"\n" +
	"\rexample.proto\x12\aexample\"!\n" +
	"\vTestRequest\x12\x12\n" +
	"\x04Text\x18\x01 \x01(\tR\x04Text\"1\n" +
	"\tTestReply\x12\x12\n" +
	"\x04Text\x18\x01 \x01(\tR\x04Text\x12\x10\n" +
	"\x03Num\x18\x02 \x01(\x05R\x03Num2=\n" +
	"\aExample\x122\n" +
	"\x04Test\x12\x14.example.TestRequest\x1a\x12.example.TestReply\"\x00B%Z#github.com/iakud/knoll/nrpc/exampleb\beditionsp\xe8\a"

var file_example_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_example_proto_goTypes = []any{
	(*TestRequest)(nil), // 0: example.TestRequest
	(*TestReply)(nil),   // 1: example.TestReply
}
var file_example_proto_depIdxs = []int32{
	0, // 0: example.Example.Test:input_type -> example.TestRequest
	1, // 1: example.Example.Test:output_type -> example.TestReply
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_example_proto_init() }
func file_example_proto_init() {
	if File_example_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_example_proto_rawDesc), len(file_example_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_example_proto_goTypes,
		DependencyIndexes: file_example_proto_depIdxs,
		MessageInfos:      file_example_proto_msgTypes,
	}.Build()
	File_example_proto = out.File
	file_example_proto_goTypes = nil
	file_example_proto_depIdxs = nil
}
