// Code generated by protoc-gen-go-nrpc. DO NOT EDIT.
// versions:
// - protoc-gen-nrpc v1.0.0
// - protoc             v6.30.2
// source: hello.proto

package hello

import (
	context "context"
	nrpc "github.com/iakud/knoll/nrpc"
)

const (
	Hello_SayHello_FullMethodName = "/hello.Hello/SayHello"
)

type HelloClient interface {
	SayHello(ctx context.Context, in *SayHelloRequest) (*SayHelloReply, error)
}

type helloClient struct {
	cc nrpc.ClientConnInterface
}

func NewHelloClient(cc nrpc.ClientConnInterface) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) SayHello(ctx context.Context, in *SayHelloRequest) (*SayHelloReply, error) {
	out := new(SayHelloReply)
	err := c.cc.Invoke(ctx, Hello_SayHello_FullMethodName, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type HelloServer interface {
	SayHello(context.Context, *SayHelloRequest) (*SayHelloReply, error)
}

func RegisterHelloServer(s nrpc.ServiceRegistrar, srv HelloServer) {
	s.RegisterService(&Hello_ServiceDesc, srv)
}

func _Hello_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SayHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(HelloServer).SayHello(ctx, in)
}

var Hello_ServiceDesc = nrpc.ServiceDesc{
	ServiceName: "hello.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []nrpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Hello_SayHello_Handler,
		},
	},
	Metadata: "hello.proto",
}
