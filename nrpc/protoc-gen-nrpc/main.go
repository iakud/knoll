package main

import (
	"flag"
	"log"
	"text/template"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/pluginpb"
)

var tpl = `
// Code generated by nrpc. DO NOT EDIT.
// source: {{with .Proto}}{{.Name}}{{end}}

package {{.GoPackageName}}
`

func main() {
	var (
		flags flag.FlagSet
	)
	/*
		data, err := io.ReadAll(os.Stdin)
		if err != nil {
			log.Fatalf("error: reading input: %v", err)
		}
	*/
	t, err := template.New("nrpc").Parse(tpl)
	if err != nil {
		log.Fatalf("error: reading input: %v", err)
	}

	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(gen *protogen.Plugin) error {
		gen.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL) | uint64(pluginpb.CodeGeneratorResponse_FEATURE_SUPPORTS_EDITIONS)
		gen.SupportedEditionsMinimum = descriptorpb.Edition_EDITION_PROTO2
		gen.SupportedEditionsMaximum = descriptorpb.Edition_EDITION_2023
		for _, f := range gen.Files {
			filename := f.GeneratedFilenamePrefix + "_nrpc.pb.go"
			nf := gen.NewGeneratedFile(filename, f.GoImportPath)
			t.Execute(nf, f)
		}
		return nil
	})
}
