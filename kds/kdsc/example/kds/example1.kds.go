// Code generated by kds. DO NOT EDIT.
// source: example\example1.kds

package kds;

import (
	"iter"
	"maps"
	"time"

	"github.com/iakud/knoll/kds/kdsc/example/kdspb"
	"github.com/iakud/knoll/kds/wire"
	"google.golang.org/protobuf/types/known/durationpb"
	"google.golang.org/protobuf/types/known/timestamppb"
)

type syncablePlayer struct {
}

type Player struct {
	id int64
	syncable syncablePlayer
	syncableInfo *PlayerBasicInfo
	syncableHero *PlayerHero
	syncableBag *PlayerBag

	dirty uint64
}

func NewPlayer() *Player {
	x := new(Player)
	x.dirty = 1
	x.id = 0 // FIXME: gen nextId()
	x.setInfo(NewPlayerBasicInfo())
	x.setHero(NewPlayerHero())
	x.setBag(NewPlayerBag())
	return x
}

func (x *Player) Id() int64 {
	return x.id
}

func (x *Player) GetInfo() *PlayerBasicInfo {
	return x.syncableInfo
}

func (x *Player) setInfo(v *PlayerBasicInfo) {
	if v != nil && v.dirtyParent != nil {
		panic("the component should be removed from its original place first")
	}
	if v == x.syncableInfo {
		return
	}
	if x.syncableInfo != nil {
		x.syncableInfo.dirtyParent = nil
	}
	x.syncableInfo = v
	v.dirtyParent = func() {
		x.markDirty(uint64(0x01) << 1)
	}
	x.markDirty(uint64(0x01) << 1)
	if v != nil {
		v.markDirty(uint64(0x01))
	}
}

func (x *Player) GetHero() *PlayerHero {
	return x.syncableHero
}

func (x *Player) setHero(v *PlayerHero) {
	if v != nil && v.dirtyParent != nil {
		panic("the component should be removed from its original place first")
	}
	if v == x.syncableHero {
		return
	}
	if x.syncableHero != nil {
		x.syncableHero.dirtyParent = nil
	}
	x.syncableHero = v
	v.dirtyParent = func() {
		x.markDirty(uint64(0x01) << 2)
	}
	x.markDirty(uint64(0x01) << 2)
	if v != nil {
		v.markDirty(uint64(0x01))
	}
}

func (x *Player) GetBag() *PlayerBag {
	return x.syncableBag
}

func (x *Player) setBag(v *PlayerBag) {
	if v != nil && v.dirtyParent != nil {
		panic("the component should be removed from its original place first")
	}
	if v == x.syncableBag {
		return
	}
	if x.syncableBag != nil {
		x.syncableBag.dirtyParent = nil
	}
	x.syncableBag = v
	v.dirtyParent = func() {
		x.markDirty(uint64(0x01) << 3)
	}
	x.markDirty(uint64(0x01) << 3)
	if v != nil {
		v.markDirty(uint64(0x01))
	}
}

func (x *Player) DumpChange() *kdspb.Player {
	if x.checkDirty(uint64(0x01)) {
		return x.DumpFull()
	}
	m := new(kdspb.Player)
	if x.checkDirty(uint64(0x01) << 1) {
		m.SetInfo(x.syncableInfo.DumpChange())
	}
	if x.checkDirty(uint64(0x01) << 2) {
		m.SetHero(x.syncableHero.DumpChange())
	}
	if x.checkDirty(uint64(0x01) << 3) {
		m.SetBag(x.syncableBag.DumpChange())
	}
	return m
}

func (x *Player) DumpFull() *kdspb.Player {
	m := new(kdspb.Player)
	m.SetInfo(x.syncableInfo.DumpFull())
	m.SetHero(x.syncableHero.DumpFull())
	m.SetBag(x.syncableBag.DumpFull())
	return m
}

func (x *Player) Load(m *kdspb.Player) {
	x.syncableInfo.Load(m.GetInfo())
	x.syncableHero.Load(m.GetHero())
	x.syncableBag.Load(m.GetBag())
}

func (x *Player) Marshal(b []byte) ([]byte, error) {
	var err error
	if b, err = wire.MarshalMessage(b, 1, x.syncableInfo); err != nil {
		return b, err
	}
	if b, err = wire.MarshalMessage(b, 2, x.syncableHero); err != nil {
		return b, err
	}
	if b, err = wire.MarshalMessage(b, 3, x.syncableBag); err != nil {
		return b, err
	}
	return b, err
}

func (x *Player) MarshalDirty(b []byte) ([]byte, error) {
	if x.checkDirty(uint64(0x01)) {
		return x.Marshal(b)
	}
	var err error
	if x.checkDirty(uint64(0x01) << 1) {
		if b, err = wire.MarshalMessageDirty(b, 1, x.syncableInfo); err != nil {
			return b, err
		}
	}
	if x.checkDirty(uint64(0x01) << 2) {
		if b, err = wire.MarshalMessageDirty(b, 2, x.syncableHero); err != nil {
			return b, err
		}
	}
	if x.checkDirty(uint64(0x01) << 3) {
		if b, err = wire.MarshalMessageDirty(b, 3, x.syncableBag); err != nil {
			return b, err
		}
	}
	return b, err
}

func (x *Player) Unmarshal(b []byte) error {
	for len(b) > 0 {
		num, wtyp, tagLen := wire.ConsumeTag(b)
		if tagLen < 0 {
			return wire.ErrDecode
		}
		if num > wire.MaxValidNumber {
			return wire.ErrDecode
		}

		var err error = wire.ErrUnknown
		var valLen int
		switch num {
		case 1:
			valLen, err = wire.UnmarshalMessage(b[tagLen:], wtyp, x.syncableInfo)
		case 2:
			valLen, err = wire.UnmarshalMessage(b[tagLen:], wtyp, x.syncableHero)
		case 3:
			valLen, err = wire.UnmarshalMessage(b[tagLen:], wtyp, x.syncableBag)
		}
		if err == wire.ErrUnknown {
			valLen = wire.ConsumeFieldValue(num, wtyp, b[tagLen:])
			if valLen < 0 {
				return wire.ErrDecode
			}
		} else if err != nil {
			return err
		}
		b = b[tagLen+valLen:]
	}
	return nil
}

func (x *Player) markAll() {
	x.dirty = uint64(0x01)
}

func (x *Player) markDirty(n uint64) {
	if x.dirty & n == n {
		return
	}
	x.dirty |= n
}

func (x *Player) checkDirty(n uint64) bool {
	return x.dirty & n != 0
}

func (x *Player) ClearDirty() {
	if x.dirty == 0 {
		return
	}
	if x.dirty & uint64(0x01) != 0 || x.dirty & uint64(0x01) << 1 != 0 {
		x.syncableInfo.clearDirty()
	}
	if x.dirty & uint64(0x01) != 0 || x.dirty & uint64(0x01) << 2 != 0 {
		x.syncableHero.clearDirty()
	}
	if x.dirty & uint64(0x01) != 0 || x.dirty & uint64(0x01) << 3 != 0 {
		x.syncableBag.clearDirty()
	}
	x.dirty = 0
}

type syncablePlayerBasicInfo struct {
	Name string
	IsNew bool
	CreateTime time.Time
}

type dirtyParentFunc_PlayerBasicInfo func()

func (f dirtyParentFunc_PlayerBasicInfo) invoke() {
	if f == nil {
		return
	}
	f()
}

type PlayerBasicInfo struct {
	syncable syncablePlayerBasicInfo

	dirty uint64
	dirtyParent dirtyParentFunc_PlayerBasicInfo
}

func NewPlayerBasicInfo() *PlayerBasicInfo {
	x := new(PlayerBasicInfo)
	x.dirty = 1
	return x
}

func (x *PlayerBasicInfo) GetName() string {
	return x.syncable.Name
}

func (x *PlayerBasicInfo) SetName(v string) {
	if v == x.syncable.Name {
		return
	}
	x.syncable.Name = v
	x.markDirty(uint64(0x01) << 1)
}

func (x *PlayerBasicInfo) GetIsNew() bool {
	return x.syncable.IsNew
}

func (x *PlayerBasicInfo) SetIsNew(v bool) {
	if v == x.syncable.IsNew {
		return
	}
	x.syncable.IsNew = v
	x.markDirty(uint64(0x01) << 3)
}

func (x *PlayerBasicInfo) GetCreateTime() time.Time {
	return x.syncable.CreateTime
}

func (x *PlayerBasicInfo) SetCreateTime(v time.Time) {
	if v.Equal(x.syncable.CreateTime) {
		return
	}
	x.syncable.CreateTime = v
	x.markDirty(uint64(0x01) << 5)
}

func (x *PlayerBasicInfo) DumpChange() *kdspb.PlayerBasicInfo {
	if x.checkDirty(uint64(0x01)) {
		return x.DumpFull()
	}
	m := new(kdspb.PlayerBasicInfo)
	if x.checkDirty(uint64(0x01) << 1) {
		m.SetName(x.syncable.Name)
	}
	if x.checkDirty(uint64(0x01) << 3) {
		m.SetIsNew(x.syncable.IsNew)
	}
	if x.checkDirty(uint64(0x01) << 5) {
		m.SetCreateTime(timestamppb.New(x.syncable.CreateTime))
	}
	return m
}

func (x *PlayerBasicInfo) DumpFull() *kdspb.PlayerBasicInfo {
	m := new(kdspb.PlayerBasicInfo)
	m.SetName(x.syncable.Name)
	m.SetIsNew(x.syncable.IsNew)
	m.SetCreateTime(timestamppb.New(x.syncable.CreateTime))
	return m
}

func (x *PlayerBasicInfo) Load(m *kdspb.PlayerBasicInfo) {
	x.syncable.Name = m.GetName()
	x.syncable.IsNew = m.GetIsNew()
	x.syncable.CreateTime = m.GetCreateTime().AsTime()
}

func (x *PlayerBasicInfo) Marshal(b []byte) ([]byte, error) {
	var err error
	if b, err = wire.MarshalString(b, 1, x.syncable.Name); err != nil {
		return b, err
	}
	if b, err = wire.MarshalBool(b, 3, x.syncable.IsNew); err != nil {
		return b, err
	}
	if b, err = wire.MarshalTimestamp(b, 5, x.syncable.CreateTime); err != nil {
		return b, err
	}
	return b, err
}

func (x *PlayerBasicInfo) MarshalDirty(b []byte) ([]byte, error) {
	if x.checkDirty(uint64(0x01)) {
		return x.Marshal(b)
	}
	var err error
	if x.checkDirty(uint64(0x01) << 1) {
		if b, err = wire.MarshalString(b, 1, x.syncable.Name); err != nil {
			return b, err
		}
	}
	if x.checkDirty(uint64(0x01) << 3) {
		if b, err = wire.MarshalBool(b, 3, x.syncable.IsNew); err != nil {
			return b, err
		}
	}
	if x.checkDirty(uint64(0x01) << 5) {
		if b, err = wire.MarshalTimestamp(b, 5, x.syncable.CreateTime); err != nil {
			return b, err
		}
	}
	return b, err
}

func (x *PlayerBasicInfo) Unmarshal(b []byte) error {
	for len(b) > 0 {
		num, wtyp, tagLen := wire.ConsumeTag(b)
		if tagLen < 0 {
			return wire.ErrDecode
		}
		if num > wire.MaxValidNumber {
			return wire.ErrDecode
		}

		var err error = wire.ErrUnknown
		var valLen int
		switch num {
		case 1:
			valLen, err = wire.UnmarshalString(b[tagLen:], wtyp, &x.syncable.Name)
		case 3:
			valLen, err = wire.UnmarshalBool(b[tagLen:], wtyp, &x.syncable.IsNew)
		case 5:
			valLen, err = wire.UnmarshalTimestamp(b[tagLen:], wtyp, &x.syncable.CreateTime)
		}
		if err == wire.ErrUnknown {
			valLen = wire.ConsumeFieldValue(num, wtyp, b[tagLen:])
			if valLen < 0 {
				return wire.ErrDecode
			}
		} else if err != nil {
			return err
		}
		b = b[tagLen+valLen:]
	}
	return nil
}

func (x *PlayerBasicInfo) markAll() {
	x.dirty = uint64(0x01)
}

func (x *PlayerBasicInfo) markDirty(n uint64) {
	if x.dirty & n == n {
		return
	}
	x.dirty |= n
	x.dirtyParent.invoke()
}

func (x *PlayerBasicInfo) checkDirty(n uint64) bool {
	return x.dirty & n != 0
}

func (x *PlayerBasicInfo) clearDirty() {
	if x.dirty == 0 {
		return
	}
	x.dirty = 0
}

type syncablePlayerHero struct {
}

type dirtyParentFunc_PlayerHero func()

func (f dirtyParentFunc_PlayerHero) invoke() {
	if f == nil {
		return
	}
	f()
}

type PlayerHero struct {
	syncable syncablePlayerHero
	syncableHeroes Int64_Hero_Map

	dirty uint64
	dirtyParent dirtyParentFunc_PlayerHero
}

func NewPlayerHero() *PlayerHero {
	x := new(PlayerHero)
	x.dirty = 1
	x.initHeroes()
	return x
}

func (x *PlayerHero) GetHeroes() *Int64_Hero_Map {
	return &x.syncableHeroes
}

func (x *PlayerHero) initHeroes() {
	x.syncableHeroes.syncable = make(map[int64]*Hero)
	x.syncableHeroes.update = make(map[int64]*Hero)
	x.syncableHeroes.deleteKey = make(map[int64]struct{})
	x.syncableHeroes.dirtyParent = func() {
		x.markDirty(uint64(0x01) << 1)
	}
}

func (x *PlayerHero) DumpChange() *kdspb.PlayerHero {
	if x.checkDirty(uint64(0x01)) {
		return x.DumpFull()
	}
	m := new(kdspb.PlayerHero)
	if x.checkDirty(uint64(0x01) << 1) {
		m.SetHeroes(x.syncableHeroes.DumpChange())
	}
	return m
}

func (x *PlayerHero) DumpFull() *kdspb.PlayerHero {
	m := new(kdspb.PlayerHero)
	m.SetHeroes(x.syncableHeroes.DumpFull())
	return m
}

func (x *PlayerHero) Load(m *kdspb.PlayerHero) {
	x.syncableHeroes.Load(m.GetHeroes())
}

func (x *PlayerHero) Marshal(b []byte) ([]byte, error) {
	var err error
	if b, err = wire.MarshalMap(b, 1, &x.syncableHeroes); err != nil {
		return b, err
	}
	return b, err
}

func (x *PlayerHero) MarshalDirty(b []byte) ([]byte, error) {
	if x.checkDirty(uint64(0x01)) {
		return x.Marshal(b)
	}
	var err error
	if x.checkDirty(uint64(0x01) << 1) {
		if b, err = wire.MarshalMap(b, 1, &x.syncableHeroes); err != nil {
			return b, err
		}
	}
	return b, err
}

func (x *PlayerHero) Unmarshal(b []byte) error {
	for len(b) > 0 {
		num, wtyp, tagLen := wire.ConsumeTag(b)
		if tagLen < 0 {
			return wire.ErrDecode
		}
		if num > wire.MaxValidNumber {
			return wire.ErrDecode
		}

		var err error = wire.ErrUnknown
		var valLen int
		switch num {
		case 1:
			valLen, err = wire.UnmarshalMap(b[tagLen:], wtyp, &x.syncableHeroes)
		}
		if err == wire.ErrUnknown {
			valLen = wire.ConsumeFieldValue(num, wtyp, b[tagLen:])
			if valLen < 0 {
				return wire.ErrDecode
			}
		} else if err != nil {
			return err
		}
		b = b[tagLen+valLen:]
	}
	return nil
}

func (x *PlayerHero) markAll() {
	x.dirty = uint64(0x01)
}

func (x *PlayerHero) markDirty(n uint64) {
	if x.dirty & n == n {
		return
	}
	x.dirty |= n
	x.dirtyParent.invoke()
}

func (x *PlayerHero) checkDirty(n uint64) bool {
	return x.dirty & n != 0
}

func (x *PlayerHero) clearDirty() {
	if x.dirty == 0 {
		return
	}
	if x.dirty & uint64(0x01) != 0 || x.dirty & uint64(0x01) << 1 != 0 {
		x.syncableHeroes.clearDirty()
	}
	x.dirty = 0
}

type syncablePlayerBag struct {
}

type dirtyParentFunc_PlayerBag func()

func (f dirtyParentFunc_PlayerBag) invoke() {
	if f == nil {
		return
	}
	f()
}

type PlayerBag struct {
	syncable syncablePlayerBag
	syncableResources Int32_Int32_Map

	dirty uint64
	dirtyParent dirtyParentFunc_PlayerBag
}

func NewPlayerBag() *PlayerBag {
	x := new(PlayerBag)
	x.dirty = 1
	x.initResources()
	return x
}

func (x *PlayerBag) GetResources() *Int32_Int32_Map {
	return &x.syncableResources
}

func (x *PlayerBag) initResources() {
	x.syncableResources.syncable = make(map[int32]int32)
	x.syncableResources.update = make(map[int32]int32)
	x.syncableResources.deleteKey = make(map[int32]struct{})
	x.syncableResources.dirtyParent = func() {
		x.markDirty(uint64(0x01) << 1)
	}
}

func (x *PlayerBag) DumpChange() *kdspb.PlayerBag {
	if x.checkDirty(uint64(0x01)) {
		return x.DumpFull()
	}
	m := new(kdspb.PlayerBag)
	if x.checkDirty(uint64(0x01) << 1) {
		m.SetResources(x.syncableResources.DumpChange())
	}
	return m
}

func (x *PlayerBag) DumpFull() *kdspb.PlayerBag {
	m := new(kdspb.PlayerBag)
	m.SetResources(x.syncableResources.DumpFull())
	return m
}

func (x *PlayerBag) Load(m *kdspb.PlayerBag) {
	x.syncableResources.Load(m.GetResources())
}

func (x *PlayerBag) Marshal(b []byte) ([]byte, error) {
	var err error
	if b, err = wire.MarshalMap(b, 1, &x.syncableResources); err != nil {
		return b, err
	}
	return b, err
}

func (x *PlayerBag) MarshalDirty(b []byte) ([]byte, error) {
	if x.checkDirty(uint64(0x01)) {
		return x.Marshal(b)
	}
	var err error
	if x.checkDirty(uint64(0x01) << 1) {
		if b, err = wire.MarshalMap(b, 1, &x.syncableResources); err != nil {
			return b, err
		}
	}
	return b, err
}

func (x *PlayerBag) Unmarshal(b []byte) error {
	for len(b) > 0 {
		num, wtyp, tagLen := wire.ConsumeTag(b)
		if tagLen < 0 {
			return wire.ErrDecode
		}
		if num > wire.MaxValidNumber {
			return wire.ErrDecode
		}

		var err error = wire.ErrUnknown
		var valLen int
		switch num {
		case 1:
			valLen, err = wire.UnmarshalMap(b[tagLen:], wtyp, &x.syncableResources)
		}
		if err == wire.ErrUnknown {
			valLen = wire.ConsumeFieldValue(num, wtyp, b[tagLen:])
			if valLen < 0 {
				return wire.ErrDecode
			}
		} else if err != nil {
			return err
		}
		b = b[tagLen+valLen:]
	}
	return nil
}

func (x *PlayerBag) markAll() {
	x.dirty = uint64(0x01)
}

func (x *PlayerBag) markDirty(n uint64) {
	if x.dirty & n == n {
		return
	}
	x.dirty |= n
	x.dirtyParent.invoke()
}

func (x *PlayerBag) checkDirty(n uint64) bool {
	return x.dirty & n != 0
}

func (x *PlayerBag) clearDirty() {
	if x.dirty == 0 {
		return
	}
	if x.dirty & uint64(0x01) != 0 || x.dirty & uint64(0x01) << 1 != 0 {
		x.syncableResources.clearDirty()
	}
	x.dirty = 0
}

type syncableHero struct {
	HeroId int32
	HeroLevel int32
	Type HeroType
	NeedTime time.Duration
}

type dirtyParentFunc_Hero func()

func (f dirtyParentFunc_Hero) invoke() {
	if f == nil {
		return
	}
	f()
}

type Hero struct {
	syncable syncableHero

	dirty uint64
	dirtyParent dirtyParentFunc_Hero
}

func NewHero() *Hero {
	x := new(Hero)
	x.dirty = 1
	return x
}

func (x *Hero) GetHeroId() int32 {
	return x.syncable.HeroId
}

func (x *Hero) SetHeroId(v int32) {
	if v == x.syncable.HeroId {
		return
	}
	x.syncable.HeroId = v
	x.markDirty(uint64(0x01) << 1)
}

func (x *Hero) GetHeroLevel() int32 {
	return x.syncable.HeroLevel
}

func (x *Hero) SetHeroLevel(v int32) {
	if v == x.syncable.HeroLevel {
		return
	}
	x.syncable.HeroLevel = v
	x.markDirty(uint64(0x01) << 2)
}

func (x *Hero) GetType() HeroType {
	return x.syncable.Type
}

func (x *Hero) SetType(v HeroType) {
	if v == x.syncable.Type {
		return
	}
	x.syncable.Type = v
	x.markDirty(uint64(0x01) << 3)
}

func (x *Hero) GetNeedTime() time.Duration {
	return x.syncable.NeedTime
}

func (x *Hero) SetNeedTime(v time.Duration) {
	if v == x.syncable.NeedTime {
		return
	}
	x.syncable.NeedTime = v
	x.markDirty(uint64(0x01) << 4)
}

func (x *Hero) DumpChange() *kdspb.Hero {
	if x.checkDirty(uint64(0x01)) {
		return x.DumpFull()
	}
	m := new(kdspb.Hero)
	if x.checkDirty(uint64(0x01) << 1) {
		m.SetHeroId(x.syncable.HeroId)
	}
	if x.checkDirty(uint64(0x01) << 2) {
		m.SetHeroLevel(x.syncable.HeroLevel)
	}
	if x.checkDirty(uint64(0x01) << 3) {
		m.SetType(x.syncable.Type)
	}
	if x.checkDirty(uint64(0x01) << 4) {
		m.SetNeedTime(durationpb.New(x.syncable.NeedTime))
	}
	return m
}

func (x *Hero) DumpFull() *kdspb.Hero {
	m := new(kdspb.Hero)
	m.SetHeroId(x.syncable.HeroId)
	m.SetHeroLevel(x.syncable.HeroLevel)
	m.SetType(x.syncable.Type)
	m.SetNeedTime(durationpb.New(x.syncable.NeedTime))
	return m
}

func (x *Hero) Load(m *kdspb.Hero) {
	x.syncable.HeroId = m.GetHeroId()
	x.syncable.HeroLevel = m.GetHeroLevel()
	x.syncable.Type = m.GetType()
	x.syncable.NeedTime = m.GetNeedTime().AsDuration()
}

func (x *Hero) Marshal(b []byte) ([]byte, error) {
	var err error
	if b, err = wire.MarshalInt32(b, 1, x.syncable.HeroId); err != nil {
		return b, err
	}
	if b, err = wire.MarshalInt32(b, 2, x.syncable.HeroLevel); err != nil {
		return b, err
	}
	// FIXME: enum value
	if b, err = wire.MarshalInt32(b, 3, int32(x.syncable.Type)); err != nil {
		return b, err
	}
	if b, err = wire.MarshalDuration(b, 4, x.syncable.NeedTime); err != nil {
		return b, err
	}
	return b, err
}

func (x *Hero) MarshalDirty(b []byte) ([]byte, error) {
	if x.checkDirty(uint64(0x01)) {
		return x.Marshal(b)
	}
	var err error
	if x.checkDirty(uint64(0x01) << 1) {
		if b, err = wire.MarshalInt32(b, 1, x.syncable.HeroId); err != nil {
			return b, err
		}
	}
	if x.checkDirty(uint64(0x01) << 2) {
		if b, err = wire.MarshalInt32(b, 2, x.syncable.HeroLevel); err != nil {
			return b, err
		}
	}
	if x.checkDirty(uint64(0x01) << 3) {
		// FIXME: enum value
		if b, err = wire.MarshalInt32(b, 3, int32(x.syncable.Type)); err != nil {
			return b, err
		}
	}
	if x.checkDirty(uint64(0x01) << 4) {
		if b, err = wire.MarshalDuration(b, 4, x.syncable.NeedTime); err != nil {
			return b, err
		}
	}
	return b, err
}

func (x *Hero) Unmarshal(b []byte) error {
	for len(b) > 0 {
		num, wtyp, tagLen := wire.ConsumeTag(b)
		if tagLen < 0 {
			return wire.ErrDecode
		}
		if num > wire.MaxValidNumber {
			return wire.ErrDecode
		}

		var err error = wire.ErrUnknown
		var valLen int
		switch num {
		case 1:
			valLen, err = wire.UnmarshalInt32(b[tagLen:], wtyp, &x.syncable.HeroId)
		case 2:
			valLen, err = wire.UnmarshalInt32(b[tagLen:], wtyp, &x.syncable.HeroLevel)
		case 3:
			// FIXME: enum value
			valLen, err = wire.UnmarshalInt32(b[tagLen:], wtyp, (*int32)(&x.syncable.Type))
		case 4:
			valLen, err = wire.UnmarshalDuration(b[tagLen:], wtyp, &x.syncable.NeedTime)
		}
		if err == wire.ErrUnknown {
			valLen = wire.ConsumeFieldValue(num, wtyp, b[tagLen:])
			if valLen < 0 {
				return wire.ErrDecode
			}
		} else if err != nil {
			return err
		}
		b = b[tagLen+valLen:]
	}
	return nil
}

func (x *Hero) markAll() {
	x.dirty = uint64(0x01)
}

func (x *Hero) markDirty(n uint64) {
	if x.dirty & n == n {
		return
	}
	x.dirty |= n
	x.dirtyParent.invoke()
}

func (x *Hero) checkDirty(n uint64) bool {
	return x.dirty & n != 0
}

func (x *Hero) clearDirty() {
	if x.dirty == 0 {
		return
	}
	x.dirty = 0
}

type dirtyParentFunc_Int64_Hero_Map func()

func (f dirtyParentFunc_Int64_Hero_Map) invoke() {
	if f == nil {
		return
	}
	f()
}

type Int64_Hero_Map struct {
	syncable map[int64]*Hero

	update map[int64]*Hero
	deleteKey map[int64]struct{}
	clear bool
	dirty bool
	dirtyParent dirtyParentFunc_Int64_Hero_Map
}

func (x *Int64_Hero_Map) Len() int {
	return len(x.syncable)
}

func (x *Int64_Hero_Map) Clear() {
	if len(x.syncable) == 0 && len(x.deleteKey) == 0 {
		return
	}
	for _, v := range x.syncable {
		if v != nil {
			v.dirtyParent = nil
		}
	}
	clear(x.syncable)
	clear(x.update)
	clear(x.deleteKey)
	x.clear = true
	x.markDirty()
}

func (x *Int64_Hero_Map) Get(k int64) (*Hero, bool) {
	v, ok := x.syncable[k]
	return v, ok
}

func (x *Int64_Hero_Map) Set(k int64, v *Hero) {
	if v != nil && v.dirtyParent != nil {
		panic("the component should be removed from its original place first")
	}
	if e, ok := x.syncable[k]; ok {
		if e == v {
			return
		}
		if e != nil {
			e.dirtyParent = nil
		}
	}
	x.syncable[k] = v
	if v != nil {
		v.dirtyParent = func() {
			if _, ok := x.update[k]; ok {
				return
			}
			x.update[k] = v
			x.markDirty()
		}
		v.dirty |= uint64(0x01)
	}
	x.update[k] = v
	delete(x.deleteKey, k)
	x.markDirty()
}

func (x *Int64_Hero_Map) Delete(k int64) {
	if v, ok := x.syncable[k]; !ok {
		return
	} else if v != nil {
		v.dirtyParent = nil
	}
	delete(x.syncable, k)
	x.deleteKey[k] = struct{}{}
	delete(x.update, k)
	x.markDirty()
}

func (x *Int64_Hero_Map) All() iter.Seq2[int64, *Hero] {
	return maps.All(x.syncable)
}

func (x *Int64_Hero_Map) Keys() iter.Seq[int64] {
	return maps.Keys(x.syncable)
}

func (x *Int64_Hero_Map) Values() iter.Seq[*Hero] {
	return maps.Values(x.syncable)
}

func (x *Int64_Hero_Map) DumpChange() map[int64]*kdspb.Hero {
	if x.clear {
		return x.DumpFull()
	}
	m := make(map[int64]*kdspb.Hero)
	for k, v := range x.update {
		m[k] = v.DumpFull()
	}
	for k, _ := range x.deleteKey {
		_ = k // deleteKeys
	}
	return m
}

func (x *Int64_Hero_Map) DumpFull() map[int64]*kdspb.Hero {
	m := make(map[int64]*kdspb.Hero)
	for k, v := range x.syncable {
		m[k] = v.DumpFull()
	}
	return m
}

func (x *Int64_Hero_Map) Load(m map[int64]*kdspb.Hero) {
	for k, v := range m {
		c := NewHero()
		c.Load(v)
		x.syncable[k] = c
	}
}

func (x *Int64_Hero_Map) markDirty() {
	if x.dirty {
		return
	}
	x.dirty = true
	x.dirtyParent.invoke()
}

func (x *Int64_Hero_Map) clearDirty() {
	if !x.dirty {
		return
	}
	for _, v := range x.update {
		if v != nil {
			v.clearDirty()
		}
	}
	clear(x.update)
	clear(x.deleteKey)
	x.clear = false
	x.dirty = false
}

func (x *Int64_Hero_Map) MarshalMap(b []byte) ([]byte, error) {
	if len(x.syncable) == 0 {
		return b, nil
	}
	var pos int
	var err error
	for k, v := range x.syncable {
		b = wire.AppendTag(b, 3, wire.BytesType)
		b, pos = wire.AppendSpeculativeLength(b)
		if b, err = wire.MarshalInt64(b, 1, k); err != nil {
			return b, err
		}
		if b, err = wire.MarshalMessage(b, 2, v); err != nil {
			return b, err
		}
		b = wire.FinishSpeculativeLength(b, pos)
	}
	return b, err
}

func (x *Int64_Hero_Map) unmarshalMap(b []byte) error {
	var key int64
	value := NewHero()
	for len(b) > 0 {
		num, wtyp, n := wire.ConsumeTag(b)
		if n < 0 {
			return wire.ErrDecode
		}
		if num > wire.MaxValidNumber {
			return wire.ErrDecode
		}
		b = b[n:]

		err := wire.ErrUnknown
		switch num {
		case 1:
			n, err = wire.UnmarshalInt64(b, wtyp, &key)
		case 2:
			n, err = wire.UnmarshalMessage(b, wtyp, value)
		}
		if err == wire.ErrUnknown {
			n = wire.ConsumeFieldValue(num, wtyp, b)
			if n < 0 {
				return wire.ErrDecode
			}
		} else if err != nil {
			return err
		}
		b = b[n:]
	}
	x.syncable[key] = value
	return nil
}

func (x *Int64_Hero_Map) UnmarshalMap(b []byte) error {
	for len(b) > 0 {
		num, wtyp, n := wire.ConsumeTag(b)
		if n < 0 {
			return wire.ErrDecode
		}
		if num > wire.MaxValidNumber {
			return wire.ErrDecode
		}
		b = b[n:]
		err := wire.ErrUnknown
		switch num {
		case 3:
			if wtyp != wire.BytesType {
				break
			}
			v, n := wire.ConsumeBytes(b)
			if n < 0 {
				return wire.ErrDecode
			}
			if err := x.unmarshalMap(v); err != nil {
				return err
			}
			err = nil
		}
		if err == wire.ErrUnknown {
			n = wire.ConsumeFieldValue(num, wtyp, b)
			if n < 0 {
				return wire.ErrDecode
			}
		} else if err != nil {
			return err
		}
		b = b[n:]
	}
	return nil
}

type HeroType = kdspb.HeroType

const (
	HeroType_HeroType1 HeroType = 0
	HeroType_HeroType2 HeroType = 2
	HeroType_HeroType3 HeroType = -5
)