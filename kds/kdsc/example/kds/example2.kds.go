// Code generated by kds. DO NOT EDIT.
// source: example\example2.kds

package kds

import (
	"iter"
	"slices"

	"github.com/iakud/knoll/kds/kdsc/example/kdspb"
	"github.com/iakud/knoll/kds/wire"
)

type City struct {
	id int64
	xxx_hidden_PlayerId int64
	xxx_hidden_PlayerBasicInfo *PlayerBasicInfo
	xxx_hidden_CityInfo *CityBaseInfo
	xxx_hidden_Troops Int64_List

	dirty uint64
}

func NewCity() *City {
	x := new(City)
	x.dirty = 1
	x.id = 0 // FIXME: gen nextId()
	x.setPlayerBasicInfo(NewPlayerBasicInfo())
	x.setCityInfo(NewCityBaseInfo())
	x.initTroops()
	return x
}

func (x *City) Id() int64 {
	return x.id
}

func (x *City) GetPlayerId() int64 {
	return x.xxx_hidden_PlayerId
}

func (x *City) SetPlayerId(v int64) {
	if v == x.xxx_hidden_PlayerId {
		return
	}
	x.xxx_hidden_PlayerId = v
	x.markDirty(uint64(0x01) << 1)
}

func (x *City) GetPlayerBasicInfo() *PlayerBasicInfo {
	return x.xxx_hidden_PlayerBasicInfo
}

func (x *City) setPlayerBasicInfo(v *PlayerBasicInfo) {
	if v != nil && v.dirtyParent != nil {
		panic("the component should be removed from its original place first")
	}
	if v == x.xxx_hidden_PlayerBasicInfo {
		return
	}
	if x.xxx_hidden_PlayerBasicInfo != nil {
		x.xxx_hidden_PlayerBasicInfo.dirtyParent = nil
	}
	x.xxx_hidden_PlayerBasicInfo = v
	v.dirtyParent = func() {
		x.markDirty(uint64(0x01) << 2)
	}
	x.markDirty(uint64(0x01) << 2)
	if v != nil {
		v.markDirty(uint64(0x01))
	}
}

func (x *City) GetCityInfo() *CityBaseInfo {
	return x.xxx_hidden_CityInfo
}

func (x *City) setCityInfo(v *CityBaseInfo) {
	if v != nil && v.dirtyParent != nil {
		panic("the component should be removed from its original place first")
	}
	if v == x.xxx_hidden_CityInfo {
		return
	}
	if x.xxx_hidden_CityInfo != nil {
		x.xxx_hidden_CityInfo.dirtyParent = nil
	}
	x.xxx_hidden_CityInfo = v
	v.dirtyParent = func() {
		x.markDirty(uint64(0x01) << 3)
	}
	x.markDirty(uint64(0x01) << 3)
	if v != nil {
		v.markDirty(uint64(0x01))
	}
}

func (x *City) GetTroops() *Int64_List {
	return &x.xxx_hidden_Troops
}

func (x *City) initTroops() {
	x.xxx_hidden_Troops.dirtyParent = func() {
		x.markDirty(uint64(0x01) << 4)
	}
}

func (x *City) DumpChange() *kdspb.City {
	if x.checkDirty(uint64(0x01)) {
		return x.DumpFull()
	}
	m := new(kdspb.City)
	if x.checkDirty(uint64(0x01) << 1) {
		m.SetPlayerId(x.xxx_hidden_PlayerId)
	}
	if x.checkDirty(uint64(0x01) << 2) {
		m.SetPlayerBasicInfo(x.xxx_hidden_PlayerBasicInfo.DumpChange())
	}
	if x.checkDirty(uint64(0x01) << 3) {
		m.SetCityInfo(x.xxx_hidden_CityInfo.DumpChange())
	}
	if x.checkDirty(uint64(0x01) << 4) {
		m.SetTroops(x.xxx_hidden_Troops.DumpChange())
	}
	return m
}

func (x *City) DumpFull() *kdspb.City {
	m := new(kdspb.City)
	m.SetPlayerId(x.xxx_hidden_PlayerId)
	m.SetPlayerBasicInfo(x.xxx_hidden_PlayerBasicInfo.DumpFull())
	m.SetCityInfo(x.xxx_hidden_CityInfo.DumpFull())
	m.SetTroops(x.xxx_hidden_Troops.DumpFull())
	return m
}

func (x *City) Load(m *kdspb.City) {
	x.xxx_hidden_PlayerId = m.GetPlayerId()
	x.xxx_hidden_PlayerBasicInfo.Load(m.GetPlayerBasicInfo())
	x.xxx_hidden_CityInfo.Load(m.GetCityInfo())
	x.xxx_hidden_Troops.Load(m.GetTroops())
}

func (x *City) Marshal(b []byte) ([]byte, error) {
	var err error
	if b, err = wire.MarshalInt64(b, 1, x.xxx_hidden_PlayerId); err != nil {
		return b, err
	}
	if b, err = wire.MarshalMessage(b, 2, x.xxx_hidden_PlayerBasicInfo); err != nil {
		return b, err
	}
	if b, err = wire.MarshalMessage(b, 3, x.xxx_hidden_CityInfo); err != nil {
		return b, err
	}
	if b, err = wire.MarshalList(b, 4, &x.xxx_hidden_Troops); err != nil {
		return b, err
	}
	return b, err
}

func (x *City) MarshalDirty(b []byte) ([]byte, error) {
	if x.checkDirty(uint64(0x01)) {
		return x.Marshal(b)
	}
	var err error
	if x.checkDirty(uint64(0x01) << 1) {
		if b, err = wire.MarshalInt64(b, 1, x.xxx_hidden_PlayerId); err != nil {
			return b, err
		}
	}
	if x.checkDirty(uint64(0x01) << 2) {
		if b, err = wire.MarshalMessageDirty(b, 2, x.xxx_hidden_PlayerBasicInfo); err != nil {
			return b, err
		}
	}
	if x.checkDirty(uint64(0x01) << 3) {
		if b, err = wire.MarshalMessageDirty(b, 3, x.xxx_hidden_CityInfo); err != nil {
			return b, err
		}
	}
	if x.checkDirty(uint64(0x01) << 4) {
		if b, err = wire.MarshalList(b, 4, &x.xxx_hidden_Troops); err != nil {
			return b, err
		}
	}
	return b, err
}

func (x *City) Unmarshal(b []byte) error {
	for len(b) > 0 {
		num, wtyp, tagLen, err := wire.ConsumeTag(b)
		if err != nil {
			return err
		}
		var valLen int
		err = wire.ErrUnknown
		switch num {
		case 1:
			x.xxx_hidden_PlayerId, valLen, err = wire.UnmarshalInt64(b[tagLen:], wtyp)
		case 2:
			valLen, err = wire.UnmarshalMessage(b[tagLen:], wtyp, x.xxx_hidden_PlayerBasicInfo)
		case 3:
			valLen, err = wire.UnmarshalMessage(b[tagLen:], wtyp, x.xxx_hidden_CityInfo)
		case 4:
			valLen, err = wire.UnmarshalList(b[tagLen:], wtyp, &x.xxx_hidden_Troops)
		}
		if err == wire.ErrUnknown {
			if valLen, err = wire.ConsumeFieldValue(num, wtyp, b[tagLen:]); err != nil {
				return err
			}
		} else if err != nil {
			return err
		}
		b = b[tagLen+valLen:]
	}
	return nil
}

func (x *City) markAll() {
	x.dirty = uint64(0x01)
}

func (x *City) markDirty(n uint64) {
	if x.dirty&n == n {
		return
	}
	x.dirty |= n
}

func (x *City) checkDirty(n uint64) bool {
	return x.dirty&n != 0
}

func (x *City) ClearDirty() {
	if x.dirty == 0 {
		return
	}
	if x.dirty&uint64(0x01) != 0 || x.dirty&uint64(0x01)<<2 != 0 {
		x.xxx_hidden_PlayerBasicInfo.clearDirty()
	}
	if x.dirty&uint64(0x01) != 0 || x.dirty&uint64(0x01)<<3 != 0 {
		x.xxx_hidden_CityInfo.clearDirty()
	}
	if x.dirty&uint64(0x01) != 0 || x.dirty&uint64(0x01)<<4 != 0 {
		x.xxx_hidden_Troops.clearDirty()
	}
	x.dirty = 0
}

type dirtyParentFunc_CityBaseInfo func()

func (f dirtyParentFunc_CityBaseInfo) invoke() {
	if f == nil {
		return
	}
	f()
}

type CityBaseInfo struct {
	xxx_hidden_Positions Vector_List
	xxx_hidden_Troops Int32_Empty_Map
	xxx_hidden_BuildInfo []byte

	dirty uint64
	dirtyParent dirtyParentFunc_CityBaseInfo
}

func NewCityBaseInfo() *CityBaseInfo {
	x := new(CityBaseInfo)
	x.dirty = 1
	x.initPositions()
	x.initTroops()
	return x
}

func (x *CityBaseInfo) GetPositions() *Vector_List {
	return &x.xxx_hidden_Positions
}

func (x *CityBaseInfo) initPositions() {
	x.xxx_hidden_Positions.dirtyParent = func() {
		x.markDirty(uint64(0x01) << 1)
	}
}

func (x *CityBaseInfo) GetTroops() *Int32_Empty_Map {
	return &x.xxx_hidden_Troops
}

func (x *CityBaseInfo) initTroops() {
	x.xxx_hidden_Troops.syncable = make(map[int32]struct{})
	x.xxx_hidden_Troops.update = make(map[int32]struct{})
	x.xxx_hidden_Troops.deleteKey = make(map[int32]struct{})
	x.xxx_hidden_Troops.dirtyParent = func() {
		x.markDirty(uint64(0x01) << 2)
	}
}

func (x *CityBaseInfo) GetBuildInfo() []byte {
	return x.xxx_hidden_BuildInfo
}

func (x *CityBaseInfo) SetBuildInfo(v []byte) {
	if v == nil && x.xxx_hidden_BuildInfo == nil {
		return
	}
	x.xxx_hidden_BuildInfo = v
	x.markDirty(uint64(0x01) << 3)
}

func (x *CityBaseInfo) DumpChange() *kdspb.CityBaseInfo {
	if x.checkDirty(uint64(0x01)) {
		return x.DumpFull()
	}
	m := new(kdspb.CityBaseInfo)
	if x.checkDirty(uint64(0x01) << 1) {
		m.SetPositions(x.xxx_hidden_Positions.DumpChange())
	}
	if x.checkDirty(uint64(0x01) << 2) {
		m.SetTroops(x.xxx_hidden_Troops.DumpChange())
	}
	if x.checkDirty(uint64(0x01) << 3) {
		m.SetBuildInfo(x.xxx_hidden_BuildInfo)
	}
	return m
}

func (x *CityBaseInfo) DumpFull() *kdspb.CityBaseInfo {
	m := new(kdspb.CityBaseInfo)
	m.SetPositions(x.xxx_hidden_Positions.DumpFull())
	m.SetTroops(x.xxx_hidden_Troops.DumpFull())
	m.SetBuildInfo(x.xxx_hidden_BuildInfo)
	return m
}

func (x *CityBaseInfo) Load(m *kdspb.CityBaseInfo) {
	x.xxx_hidden_Positions.Load(m.GetPositions())
	x.xxx_hidden_Troops.Load(m.GetTroops())
	x.xxx_hidden_BuildInfo = m.GetBuildInfo()
}

func (x *CityBaseInfo) Marshal(b []byte) ([]byte, error) {
	var err error
	if b, err = wire.MarshalList(b, 1, &x.xxx_hidden_Positions); err != nil {
		return b, err
	}
	if b, err = wire.MarshalMap(b, 2, &x.xxx_hidden_Troops); err != nil {
		return b, err
	}
	if b, err = wire.MarshalBytes(b, 3, x.xxx_hidden_BuildInfo); err != nil {
		return b, err
	}
	return b, err
}

func (x *CityBaseInfo) MarshalDirty(b []byte) ([]byte, error) {
	if x.checkDirty(uint64(0x01)) {
		return x.Marshal(b)
	}
	var err error
	if x.checkDirty(uint64(0x01) << 1) {
		if b, err = wire.MarshalList(b, 1, &x.xxx_hidden_Positions); err != nil {
			return b, err
		}
	}
	if x.checkDirty(uint64(0x01) << 2) {
		if b, err = wire.MarshalMap(b, 2, &x.xxx_hidden_Troops); err != nil {
			return b, err
		}
	}
	if x.checkDirty(uint64(0x01) << 3) {
		if b, err = wire.MarshalBytes(b, 3, x.xxx_hidden_BuildInfo); err != nil {
			return b, err
		}
	}
	return b, err
}

func (x *CityBaseInfo) Unmarshal(b []byte) error {
	for len(b) > 0 {
		num, wtyp, tagLen, err := wire.ConsumeTag(b)
		if err != nil {
			return err
		}
		var valLen int
		err = wire.ErrUnknown
		switch num {
		case 1:
			valLen, err = wire.UnmarshalList(b[tagLen:], wtyp, &x.xxx_hidden_Positions)
		case 2:
			valLen, err = wire.UnmarshalMap(b[tagLen:], wtyp, &x.xxx_hidden_Troops)
		case 3:
			x.xxx_hidden_BuildInfo, valLen, err = wire.UnmarshalBytes(b[tagLen:], wtyp)
		}
		if err == wire.ErrUnknown {
			if valLen, err = wire.ConsumeFieldValue(num, wtyp, b[tagLen:]); err != nil {
				return err
			}
		} else if err != nil {
			return err
		}
		b = b[tagLen+valLen:]
	}
	return nil
}

func (x *CityBaseInfo) markAll() {
	x.dirty = uint64(0x01)
}

func (x *CityBaseInfo) markDirty(n uint64) {
	if x.dirty&n == n {
		return
	}
	x.dirty |= n
	x.dirtyParent.invoke()
}

func (x *CityBaseInfo) checkDirty(n uint64) bool {
	return x.dirty&n != 0
}

func (x *CityBaseInfo) clearDirty() {
	if x.dirty == 0 {
		return
	}
	if x.dirty&uint64(0x01) != 0 || x.dirty&uint64(0x01)<<1 != 0 {
		x.xxx_hidden_Positions.clearDirty()
	}
	if x.dirty&uint64(0x01) != 0 || x.dirty&uint64(0x01)<<2 != 0 {
		x.xxx_hidden_Troops.clearDirty()
	}
	x.dirty = 0
}

type dirtyParentFunc_Vector func()

func (f dirtyParentFunc_Vector) invoke() {
	if f == nil {
		return
	}
	f()
}

type Vector struct {
	xxx_hidden_X int32
	xxx_hidden_Y int32

	dirty uint64
	dirtyParent dirtyParentFunc_Vector
}

func NewVector() *Vector {
	x := new(Vector)
	x.dirty = 1
	return x
}

func (x *Vector) GetX() int32 {
	return x.xxx_hidden_X
}

func (x *Vector) SetX(v int32) {
	if v == x.xxx_hidden_X {
		return
	}
	x.xxx_hidden_X = v
	x.markDirty(uint64(0x01) << 1)
}

func (x *Vector) GetY() int32 {
	return x.xxx_hidden_Y
}

func (x *Vector) SetY(v int32) {
	if v == x.xxx_hidden_Y {
		return
	}
	x.xxx_hidden_Y = v
	x.markDirty(uint64(0x01) << 2)
}

func (x *Vector) DumpChange() *kdspb.Vector {
	if x.checkDirty(uint64(0x01)) {
		return x.DumpFull()
	}
	m := new(kdspb.Vector)
	if x.checkDirty(uint64(0x01) << 1) {
		m.SetX(x.xxx_hidden_X)
	}
	if x.checkDirty(uint64(0x01) << 2) {
		m.SetY(x.xxx_hidden_Y)
	}
	return m
}

func (x *Vector) DumpFull() *kdspb.Vector {
	m := new(kdspb.Vector)
	m.SetX(x.xxx_hidden_X)
	m.SetY(x.xxx_hidden_Y)
	return m
}

func (x *Vector) Load(m *kdspb.Vector) {
	x.xxx_hidden_X = m.GetX()
	x.xxx_hidden_Y = m.GetY()
}

func (x *Vector) Marshal(b []byte) ([]byte, error) {
	var err error
	if b, err = wire.MarshalInt32(b, 1, x.xxx_hidden_X); err != nil {
		return b, err
	}
	if b, err = wire.MarshalInt32(b, 2, x.xxx_hidden_Y); err != nil {
		return b, err
	}
	return b, err
}

func (x *Vector) MarshalDirty(b []byte) ([]byte, error) {
	if x.checkDirty(uint64(0x01)) {
		return x.Marshal(b)
	}
	var err error
	if x.checkDirty(uint64(0x01) << 1) {
		if b, err = wire.MarshalInt32(b, 1, x.xxx_hidden_X); err != nil {
			return b, err
		}
	}
	if x.checkDirty(uint64(0x01) << 2) {
		if b, err = wire.MarshalInt32(b, 2, x.xxx_hidden_Y); err != nil {
			return b, err
		}
	}
	return b, err
}

func (x *Vector) Unmarshal(b []byte) error {
	for len(b) > 0 {
		num, wtyp, tagLen, err := wire.ConsumeTag(b)
		if err != nil {
			return err
		}
		var valLen int
		err = wire.ErrUnknown
		switch num {
		case 1:
			x.xxx_hidden_X, valLen, err = wire.UnmarshalInt32(b[tagLen:], wtyp)
		case 2:
			x.xxx_hidden_Y, valLen, err = wire.UnmarshalInt32(b[tagLen:], wtyp)
		}
		if err == wire.ErrUnknown {
			if valLen, err = wire.ConsumeFieldValue(num, wtyp, b[tagLen:]); err != nil {
				return err
			}
		} else if err != nil {
			return err
		}
		b = b[tagLen+valLen:]
	}
	return nil
}

func (x *Vector) markAll() {
	x.dirty = uint64(0x01)
}

func (x *Vector) markDirty(n uint64) {
	if x.dirty&n == n {
		return
	}
	x.dirty |= n
	x.dirtyParent.invoke()
}

func (x *Vector) checkDirty(n uint64) bool {
	return x.dirty&n != 0
}

func (x *Vector) clearDirty() {
	if x.dirty == 0 {
		return
	}
	x.dirty = 0
}

type dirtyParentFunc_Vector_List func()

func (f dirtyParentFunc_Vector_List) invoke() {
	if f == nil {
		return
	}
	f()
}

type Vector_List struct {
	syncable []*Vector

	dirty bool
	dirtyParent dirtyParentFunc_Vector_List
}

func (x *Vector_List) Len() int {
	return len(x.syncable)
}

func (x *Vector_List) Clear() {
	if len(x.syncable) == 0 {
		return
	}
	for _, v := range x.syncable {
		if v != nil {
			v.dirtyParent = nil
		}
	}
	clear(x.syncable)
	x.syncable = x.syncable[:0]
	x.markDirty()
}

func (x *Vector_List) Get(i int) *Vector {
	return x.syncable[i]
}

func (x *Vector_List) Set(i int, v *Vector) {
	if v != nil && v.dirtyParent != nil {
		panic("the component should be removed from its original place first")
	}
	if v == x.syncable[i] {
		return
	}
	if x.syncable[i] != nil {
		x.syncable[i].dirtyParent = nil
	}
	x.syncable[i] = v
	if v != nil {
		v.dirtyParent = func() {
			x.markDirty()
		}
		v.dirty |= uint64(0x01)
	}
	x.markDirty()
}

func (x *Vector_List) Append(v ...*Vector) {
	for i := range v {
		if v[i] != nil && v[i].dirtyParent != nil {
			panic("the component should be removed from its original place first")
		}
	}
	if len(v) == 0 {
		return
	}
	x.syncable = append(x.syncable, v...)
	for i := range v {
		if v[i] != nil {
			v[i].dirtyParent = func() {
				x.markDirty()
			}
			v[i].dirty |= uint64(0x01)
		}
	}
	x.markDirty()
}

func (x *Vector_List) Index(v *Vector) int {
	for i := range x.syncable {
		if v == x.syncable[i] {
			return i
		}
	}
	return -1
}

func (x *Vector_List) IndexFunc(f func(*Vector) bool) int {
	for i := range x.syncable {
		if f(x.syncable[i]) {
			return i
		}
	}
	return -1
}

func (x *Vector_List) Contains(v *Vector) bool {
	return x.Index(v) >= 0
}

func (x *Vector_List) ContainsFunc(f func(*Vector) bool) bool {
	return x.IndexFunc(f) >= 0
}

func (x *Vector_List) Insert(i int, v ...*Vector) {
	for j := range v {
		if v[j] != nil && v[j].dirtyParent != nil {
			panic("the component should be removed from its original place first")
		}
	}
	if len(v) == 0 {
		return
	}
	x.syncable = slices.Insert(x.syncable, i, v...)
	for j := range v {
		if v[j] != nil {
			v[j].dirtyParent = func() {
				x.markDirty()
			}
			v[j].dirty |= uint64(0x01)
		}
	}
	x.markDirty()
}

func (x *Vector_List) Delete(i, j int) {
	r := x.syncable[i:j:len(x.syncable)]
	for k := range r {
		if r[k] != nil {
			r[k].dirtyParent = nil
		}
	}
	if i == j {
		return
	}
	x.syncable = slices.Delete(x.syncable, i, j)
	x.markDirty()
}

func (x *Vector_List) DeleteFunc(del func(*Vector) bool) {
	i := x.IndexFunc(del)
	if i == -1 {
		return
	}
	x.syncable[i].dirtyParent = nil
	for j := i + 1; j < len(x.syncable); j++ {
		v := x.syncable[j]
		if del(v) {
			v.dirtyParent = nil
			continue
		}
		x.syncable[i] = v
		i++
	}
	clear(x.syncable[i:])
	x.syncable = x.syncable[:i]
	x.markDirty()
}

func (x *Vector_List) Replace(i, j int, v ...*Vector) {
	for k := range v {
		if v[k] != nil && v[k].dirtyParent != nil {
			panic("the component should be removed from its original place first")
		}
	}
	r := x.syncable[i:j:len(x.syncable)]
	for k := range r {
		if r[k] != nil {
			r[k].dirtyParent = nil
		}
	}
	if i == j && len(v) == 0 {
		return
	}
	x.syncable = slices.Replace(x.syncable, i, j, v...)
	for k := range v {
		if v[k] != nil {
			v[k].dirtyParent = func() {
				x.markDirty()
			}
			v[k].dirty |= uint64(0x01)
		}
	}
	x.markDirty()
}

func (x *Vector_List) Reverse() {
	if len(x.syncable) < 2 {
		return
	}
	slices.Reverse(x.syncable)
	x.markDirty()
}

func (x *Vector_List) All() iter.Seq2[int, *Vector] {
	return slices.All(x.syncable)
}

func (x *Vector_List) Backward() iter.Seq2[int, *Vector] {
	return slices.Backward(x.syncable)
}

func (x *Vector_List) Values() iter.Seq[*Vector] {
	return slices.Values(x.syncable)
}

func (x *Vector_List) DumpChange() []*kdspb.Vector {
	return x.DumpFull()
}

func (x *Vector_List) DumpFull() []*kdspb.Vector {
	var m []*kdspb.Vector
	for _, v := range x.syncable {
		m = append(m, v.DumpChange())
	}
	return m
}

func (x *Vector_List) Load(m []*kdspb.Vector) {
	for _, v := range m {
		c := NewVector()
		c.Load(v)
		x.syncable = append(x.syncable, c)
	}
}

func (x *Vector_List) markDirty() {
	if x.dirty {
		return
	}
	x.dirty = true
	x.dirtyParent.invoke()
}

func (x *Vector_List) clearDirty() {
	for k := range x.syncable {
		if x.syncable[k] != nil {
			x.syncable[k].clearDirty()
		}
	}
	x.dirty = false
}

func (x *Vector_List) Marshal(b []byte) ([]byte, error) {
	if len(x.syncable) == 0 {
		return b, nil
	}
	var pos int
	var err error
	for _, v := range x.syncable {
		b, pos = wire.AppendSpeculativeLength(b)
		b, err = v.Marshal(b)
		if err != nil {
			return b, err
		}
		b = wire.FinishSpeculativeLength(b, pos)
	}
	return b, nil
}

func (x *Vector_List) Unmarshal(b []byte) error {
	for len(b) > 0 {
		v, n, err := wire.ConsumeBytes(b)
		if err != nil {
			return err
		}
		b = b[n:]
		c := NewVector()
		if err = c.Unmarshal(v); err != nil {
			return err
		}
		c.dirtyParent = func() {
			x.markDirty()
		}
		x.syncable = append(x.syncable, c)
	}
	return nil
}
