// Code generated by kds. DO NOT EDIT.
// source: common.kds

package kds;

import (
	"iter"
	"maps"
	"slices"

	"google.golang.org/protobuf/types/known/emptypb"
)

type dirtyParentFunc_Int32_Empty_Map func()

func (f dirtyParentFunc_Int32_Empty_Map) invoke() {
	if f == nil {
		return
	}
	f()
}

type Int32_Empty_Map struct {
	syncable map[int32]struct{}

	update map[int32]struct{}
	deleteKey map[int32]struct{}
	clear bool
	dirty bool
	dirtyParent dirtyParentFunc_Int32_Empty_Map
}

func (x *Int32_Empty_Map) Len() int {
	return len(x.syncable)
}

func (x *Int32_Empty_Map) Clear() {
	if len(x.syncable) == 0 && len(x.deleteKey) == 0 {
		return
	}
	clear(x.syncable)
	clear(x.update)
	clear(x.deleteKey)
	x.clear = true
	x.markDirty()
}

func (x *Int32_Empty_Map) Get(k int32) (struct{}, bool) {
	v, ok := x.syncable[k]
	return v, ok
}

func (x *Int32_Empty_Map) Set(k int32, v struct{}) {
	if e, ok := x.syncable[k]; ok {
		if e == v {
			return
		}
	}
	x.syncable[k] = v
	x.update[k] = v
	delete(x.deleteKey, k)
	x.markDirty()
}

func (x *Int32_Empty_Map) Delete(k int32) {
	if _, ok := x.syncable[k]; !ok {
		return
	}
	delete(x.syncable, k)
	x.deleteKey[k] = struct{}{}
	delete(x.update, k)
	x.markDirty()
}

func (x *Int32_Empty_Map) All() iter.Seq2[int32, struct{}] {
	return maps.All(x.syncable)
}

func (x *Int32_Empty_Map) Keys() iter.Seq[int32] {
	return maps.Keys(x.syncable)
}

func (x *Int32_Empty_Map) Values() iter.Seq[struct{}] {
	return maps.Values(x.syncable)
}

func (x *Int32_Empty_Map) DumpChange() map[int32]*emptypb.Empty {
	if x.clear {
		return x.DumpFull()
	}
	m := make(map[int32]*emptypb.Empty)
	for k := range x.update {
		m[k] = new(emptypb.Empty)
	}
	for k, _ := range x.deleteKey {
		_ = k // deleteKeys
	}
	return m
}

func (x *Int32_Empty_Map) DumpFull() map[int32]*emptypb.Empty {
	m := make(map[int32]*emptypb.Empty)
	for k := range x.syncable {
		m[k] = new(emptypb.Empty)
	}
	return m
}

func (x *Int32_Empty_Map) markDirty() {
	if x.dirty {
		return
	}
	x.dirty = true
	x.dirtyParent.invoke()
}

func (x *Int32_Empty_Map) clearDirty() {
	if !x.dirty {
		return
	}
	clear(x.update)
	clear(x.deleteKey)
	x.clear = false
	x.dirty = false
}

type dirtyParentFunc_Int32_Int32_Map func()

func (f dirtyParentFunc_Int32_Int32_Map) invoke() {
	if f == nil {
		return
	}
	f()
}

type Int32_Int32_Map struct {
	syncable map[int32]int32

	update map[int32]int32
	deleteKey map[int32]struct{}
	clear bool
	dirty bool
	dirtyParent dirtyParentFunc_Int32_Int32_Map
}

func (x *Int32_Int32_Map) Len() int {
	return len(x.syncable)
}

func (x *Int32_Int32_Map) Clear() {
	if len(x.syncable) == 0 && len(x.deleteKey) == 0 {
		return
	}
	clear(x.syncable)
	clear(x.update)
	clear(x.deleteKey)
	x.clear = true
	x.markDirty()
}

func (x *Int32_Int32_Map) Get(k int32) (int32, bool) {
	v, ok := x.syncable[k]
	return v, ok
}

func (x *Int32_Int32_Map) Set(k int32, v int32) {
	if e, ok := x.syncable[k]; ok {
		if e == v {
			return
		}
	}
	x.syncable[k] = v
	x.update[k] = v
	delete(x.deleteKey, k)
	x.markDirty()
}

func (x *Int32_Int32_Map) Delete(k int32) {
	if _, ok := x.syncable[k]; !ok {
		return
	}
	delete(x.syncable, k)
	x.deleteKey[k] = struct{}{}
	delete(x.update, k)
	x.markDirty()
}

func (x *Int32_Int32_Map) All() iter.Seq2[int32, int32] {
	return maps.All(x.syncable)
}

func (x *Int32_Int32_Map) Keys() iter.Seq[int32] {
	return maps.Keys(x.syncable)
}

func (x *Int32_Int32_Map) Values() iter.Seq[int32] {
	return maps.Values(x.syncable)
}

func (x *Int32_Int32_Map) DumpChange() map[int32]int32 {
	if x.clear {
		return x.DumpFull()
	}
	m := make(map[int32]int32)
	for k, v := range x.update {
		m[k] = v
	}
	for k, _ := range x.deleteKey {
		_ = k // deleteKeys
	}
	return m
}

func (x *Int32_Int32_Map) DumpFull() map[int32]int32 {
	m := make(map[int32]int32)
	for k, v := range x.syncable {
		m[k] = v
	}
	return m
}

func (x *Int32_Int32_Map) markDirty() {
	if x.dirty {
		return
	}
	x.dirty = true
	x.dirtyParent.invoke()
}

func (x *Int32_Int32_Map) clearDirty() {
	if !x.dirty {
		return
	}
	clear(x.update)
	clear(x.deleteKey)
	x.clear = false
	x.dirty = false
}

type dirtyParentFunc_Int64_List func()

func (f dirtyParentFunc_Int64_List) invoke() {
	if f == nil {
		return
	}
	f()
}

type Int64_List struct {
	syncable []int64

	dirty bool
	dirtyParent dirtyParentFunc_Int64_List
}

func (x *Int64_List) Len() int {
	return len(x.syncable)
}

func (x *Int64_List) Clear() {
	if len(x.syncable) == 0 {
		return
	}
	clear(x.syncable)
	x.syncable = x.syncable[:0]
	x.markDirty()
}

func (x *Int64_List) Get(i int) int64 {
	return x.syncable[i]
}

func (x *Int64_List) Set(i int, v int64) {
	if v == x.syncable[i] {
		return
	}
	x.syncable[i] = v
	x.markDirty()
}

func (x *Int64_List) Append(v ...int64) {
	if len(v) == 0 {
		return
	}
	x.syncable = append(x.syncable, v...)
	x.markDirty()
}

func (x *Int64_List) Insert(i int, v ...int64) {
	if len(v) == 0 {
		return
	}
	x.syncable = slices.Insert(x.syncable, i, v...)
	x.markDirty()
}

func (x *Int64_List) Delete(i, j int) {
	if i == j {
		return
	}
	x.syncable = slices.Delete(x.syncable, i, j)
	x.markDirty()
}

func (x *Int64_List) Replace(i, j int, v ...int64) {
	if i == j && len(v) == 0 {
		return
	}
	x.syncable = slices.Replace(x.syncable, i, j, v...)
	x.markDirty()
}

func (x *Int64_List) Reverse() {
	if len(x.syncable) < 2 {
		return
	}
	slices.Reverse(x.syncable)
	x.markDirty()
}

func (x *Int64_List) All() iter.Seq2[int, int64] {
	return slices.All(x.syncable)
}

func (x *Int64_List) Backward() iter.Seq2[int, int64] {
	return slices.Backward(x.syncable)
}

func (x *Int64_List) Values() iter.Seq[int64] {
	return slices.Values(x.syncable)
}

func (x *Int64_List) DumpChange() []int64 {
	return x.DumpFull()
}

func (x *Int64_List) DumpFull() []int64 {
	var m []int64
	for _, v := range x.syncable {
		m = append(m, v)
	}
	return m
}

func (x *Int64_List) markDirty() {
	if x.dirty {
		return
	}
	x.dirty = true
	x.dirtyParent.invoke()
}

func (x *Int64_List) clearDirty() {
	x.dirty = false
}